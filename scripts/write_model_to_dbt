#! /usr/bin/env python

"""Write all model details to dbt"""

import logging
from importlib import import_module

from fire import Fire
from pipelines.dags.main_ingestion_operator.dbt_schema import Model
from scripts.python_helpers.helpers import (deploy_sql_files, list_sql_files,
                                            search_and_filter_model_files,
                                            search_for_dbt_model_directories,
                                            search_in_airflow_dags,
                                            write_model_configuration,
                                            write_source_table_configuration,
                                            write_variable_information)


class InputError(Exception):
    """Exception raised for errors in the input.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self):
        self.message = "one of directory or airflow_dags must be specified"
        logging.error(self.message)


class EmptyListError(Exception):
    """Exception raised when there is nothing for the script to do.

    This is to prevent tests passing due to misconfiguration of parameters, leaving nothing to do.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self):
        self.message = "There is nothing to do in this directory"
        logging.error(self.message)


def create_full_model(model: Model):
    """Create the full dbt model."""
    write_model_configuration(model)
    sql_files = list_sql_files(model.tables)
    deploy_sql_files(model.name, sql_files)
    write_variable_information(model.variables, sql_files, model.name)
    write_source_table_configuration(model.sources, model.name)


def process_all_models(
    project: str,
    allow_empty_run: bool = True,
    directory: str = None,
    airflow_dags_dir: str = None,
) -> None:
    """
    Process all models in the directory.

    Args:
        project: the gcp project to be run on
        directory: the directory where the models are stored
        airflow_dags_dir: the dags dir to process airflow dags to get dbt models
        allow_empty_run: If false will error if no models are found (for testing)

    """
    if not directory and not airflow_dags_dir:
        raise InputError()
    if directory:
        model_dirs = search_for_dbt_model_directories(directory)
        if model_paths := search_and_filter_model_files(model_dirs):
            for file in model_paths:
                logging.info(file)
                logging.info(f"Processing file: {file}")
                dbt_model = import_module(file)
                model = dbt_model.model  # type: ignore
                create_full_model(model)
        elif not allow_empty_run:
            raise EmptyListError()
    if airflow_dags_dir:
        models = search_in_airflow_dags(airflow_dags_dir, project)
        [create_full_model(model) for model in models]


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    Fire(process_all_models)
